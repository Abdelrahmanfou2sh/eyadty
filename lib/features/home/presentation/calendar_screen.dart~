import 'package:eyadty/features/home/cubit/appointment_cubit.dart';
import 'package:eyadty/features/home/cubit/appointment_state.dart';
import 'package:eyadty/features/home/presentation/widgets/appointment_card.dart';
import 'package:eyadty/features/home/presentation/widgets/shimmer_card.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:table_calendar/table_calendar.dart';

class CalendarScreen extends StatefulWidget {
  const CalendarScreen({Key? key}) : super(key: key);

  @override
  State<CalendarScreen> createState() => _CalendarScreenState();
}

class _CalendarScreenState extends State<CalendarScreen> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  String searchQuery = "";
  final TextEditingController _searchController = TextEditingController();
  bool isSearching = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: isSearching
            ? TextField(
          controller: _searchController,
          autofocus: true,
          decoration: InputDecoration(
            hintText: 'ابحث عن اسم المريض...',
            border: InputBorder.none,
          ),
          onChanged: (query) {
            setState(() {
              searchQuery = query;
            });
          },
        )
            : Text('التقويم'),
        actions: [
          if (isSearching)
            IconButton(
              icon: Icon(Icons.arrow_back),
              onPressed: () {
                setState(() {
                  isSearching = false;
                  searchQuery = "";
                  _searchController.clear();
                });
              },
            ),
          IconButton(
            icon: Icon(isSearching ? Icons.close : Icons.search),
            onPressed: () {
              setState(() {
                isSearching = !isSearching;
                if (!isSearching) {
                  searchQuery = "";
                  _searchController.clear();
                }
              });
            },
          ),
        ],
      ),
      body: Column(
        children: [
          TableCalendar(
            firstDay: DateTime.utc(2010, 10, 16),
            lastDay: DateTime.utc(2030, 3, 14),
            focusedDay: _focusedDay,
            calendarFormat: _calendarFormat,
            selectedDayPredicate: (day) {
              return isSameDay(_selectedDay, day);
            },
            onDaySelected: (selectedDay, focusedDay) {
              if (!isSameDay(_selectedDay, selectedDay)) {
                setState(() {
                  _selectedDay = selectedDay;
                  _focusedDay = focusedDay;
                });
              }
            },
            onFormatChanged: (format) {
              if (_calendarFormat != format) {
                setState(() {
                  _calendarFormat = format;
                });
              }
            },
            onPageChanged: (focusedDay) {
              _focusedDay = focusedDay;
            },
          ),
          Expanded(
            child: BlocBuilder<AppointmentCubit, AppointmentState>(
              builder: (context, state) {
                if (state is AppointmentLoading) {
                  // Show Shimmer Effect
                  return ListView.builder(
                    itemCount: 5, // Number of shimmer cards to show
                    itemBuilder: (context, index) {
                      return ShimmerCard();
                    },
                  );
                } else if (state is AppointmentLoaded) {
                  // Show Appointment Cards
                  final filteredAppointments = _selectedDay == null
                      ? state.appointments.where((appointment) => appointment.patientName.contains(searchQuery)).toList()
                      : state.appointments.where((appointment) => isSameDay(DateTime.parse(appointment.date), _selectedDay) && appointment.patientName.contains(searchQuery)).toList();
                  return ListView.builder(
                    itemCount: filteredAppointments.length,
                    itemBuilder: (context, index) {
                      return AppointmentCard(appointment: filteredAppointments[index]);
                    },
                  );
                } else if (state is AppointmentError) {
                  // Show Error Message
                  return Center(child: Text('Error: ${state.message}'));
                } else {
                  // Show Empty State
                  return Center(child: Text('No appointments found'));
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}