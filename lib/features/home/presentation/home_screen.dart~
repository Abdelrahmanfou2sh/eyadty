import 'package:eyadty/features/home/cubit/appointment_state.dart';
import 'package:eyadty/features/home/presentation/add_appointment.dart';
import 'package:eyadty/features/home/presentation/calendar_screen.dart';
import 'package:eyadty/features/home/presentation/statistics_screen.dart';
import 'package:eyadty/features/home/presentation/widgets/appointment_card.dart';
import 'package:eyadty/features/home/presentation/widgets/shimmer_card.dart';
import 'package:eyadty/features/patient_profile/presentation/views/patients_list.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import '../cubit/appointment_cubit.dart';
import '../data/appointment_model.dart';
import 'package:excel/excel.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _currentIndex = 0;
  // Function to export appointments to Excel
  void _exportToExcel() async {
    // Create a new Excel workbook
    var excel = Excel.createExcel();
    var sheet = excel['Sheet1'];

    // Add headers
    sheet.appendRow([
      TextCellValue('الاسم'),
      TextCellValue('رقم التليفون'),
      TextCellValue('الحالة'),
      TextCellValue('اليوم'),
      TextCellValue('الموعد'),
      TextCellValue('النوع')
    ]);
    // Get appointments from the cubit (you need to implement this)
    final state = context.read<AppointmentCubit>().state;
    if (state is AppointmentLoaded) {
      List<AppointmentModel> appointments = state.appointments;

      // Add data to the sheet
      for (var appointment in appointments) {
        sheet.appendRow([
          TextCellValue(appointment.patientName),
          TextCellValue(appointment.phoneNumber),
          TextCellValue(appointment.status),
          TextCellValue(appointment.date),
          TextCellValue(appointment.time),
          TextCellValue(appointment.appointmentType)
        ]);
      }

      // Save the Excel file
      var fileBytes = excel.encode();
      if (fileBytes != null) {
        // Get the directory for storing the file
        Directory? directory;
        if (Platform.isAndroid) {
          directory = await getExternalStorageDirectory();
        } else if (Platform.isIOS) {
          directory = await getApplicationDocumentsDirectory();
        }
        if (directory != null) {
          // Create the file path
          String filePath = '${directory.path}/appointments.xlsx';
          // Create the file
          File file = File(filePath);
          // Write the bytes to the file
          await file.writeAsBytes(fileBytes);
          // Show a success message
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('تم تصدير جدول المواعيد إلى $filePath')),
          );
        } else {
          // Show an error message
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('حدث خطأ أثناء تصدير جدول المواعيد')),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final now = DateTime.now();
    final formattedTime = DateFormat('hh:mm a').format(now);
    final formattedDay = DateFormat('EEEE').format(now);
    return Scaffold(
      bottomNavigationBar: BottomNavigationBar(
        // backgroundColor: Colors.blue[700],
        // selectedItemColor: Colors.white,
        // unselectedItemColor: Colors.grey,
        // showUnselectedLabels: true,
        type: BottomNavigationBarType.fixed,
        iconSize: 30,
        selectedFontSize: 16,
        unselectedFontSize: 14,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.calendar_month),
            label: 'تقويم',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.bar_chart),
            label: 'احصائيات',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.file_download),
            label: 'تصدير',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'المرضى',
          ),
        ],
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
          if (index == 0) {
            Navigator.push(context,
                MaterialPageRoute(builder: (context) => CalendarScreen()));
          } else if (index == 1) {
            Navigator.push(context,
                MaterialPageRoute(builder: (context) => StatisticsScreen()));
          } else if (index == 2) {
            _exportToExcel();
          } else if (index == 3) {
            Navigator.push(context,
                MaterialPageRoute(builder: (context) => PatientsListScreen()));
          }
        },
      ),

      appBar: AppBar(
        title: Text('عيادتي',
            style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.white)),
        backgroundColor: Colors.blue[700],
        elevation: 0,
        // actions: [
        //   IconButton(
        //     icon: Icon(Icons.calendar_month),
        //     onPressed: () {
        //       Navigator.push(
        //         context,
        //         MaterialPageRoute(builder: (context) => CalendarScreen()),
        //       );
        //     },
        //   ),
        //   IconButton(
        //     icon: Icon(Icons.bar_chart),
        //     onPressed: () {
        //       Navigator.push(
        //         context,
        //         MaterialPageRoute(builder: (context) => StatisticsScreen()),
        //       );
        //     },
        //   ),
        //   IconButton(
        //     icon: const Icon(Icons.file_download),
        //     onPressed: _exportToExcel,
        //   ),
        //   IconButton(
        //     icon: const Icon(Icons.person),
        //     onPressed: () {
        //       Navigator.push(
        //           context,
        //           MaterialPageRoute(
        //               builder: (context) => PatientsListScreen()));
        //     },
        //   ),
        // ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Align(
              alignment: Alignment.centerRight,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(formattedDay,
                      style:
                          TextStyle(fontSize: 28, fontWeight: FontWeight.bold)),
                  SizedBox(height: 4),
                  Text(formattedTime, style: TextStyle(fontSize: 20)),
                ],
              ),
            ),
          ),
          Expanded(
            child: BlocBuilder<AppointmentCubit, AppointmentState>(
              builder: (context, state) {
                if (state is AppointmentLoading) {
                  return ListView.builder(
                    itemCount: 5, // Number of shimmer cards to show
                    itemBuilder: (context, index) {
                      return ShimmerCard();
                    },
                  );
                } else if (state is AppointmentLoaded) {
                  final today = DateTime.now();
                  final filteredAppointments =
                      state.appointments.where((appointment) {
                    final appointmentDate = DateTime.parse(appointment.date);
                    final isToday = appointmentDate.year == today.year &&
                        appointmentDate.month == today.month &&
                        appointmentDate.day == today.day;
                    return isToday;
                  }).toList();
                  // Sort appointments by time
                  filteredAppointments.sort((a, b) {
                    final timeA = convertTo24HourFormat(a.time);
                    final timeB = convertTo24HourFormat(b.time);
                    return timeA.compareTo(timeB);
                  });
                  final appointmentCount = filteredAppointments.length;
                  if (filteredAppointments.isEmpty) {
                    return Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.info_outline,
                            size: 120,
                            color: Colors.grey[400],
                          ),
                          const SizedBox(height: 20),
                          Text(
                            'لم تُضف مواعيد اليوم',
                            style: TextStyle(
                                fontSize: 20, color: Colors.grey[600]),
                          ),
                        ],
                      ),
                    );
                  }
                  return Column(
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text('عدد المواعيد اليوم: $appointmentCount',
                            style: TextStyle(
                                fontSize: 20, fontWeight: FontWeight.bold)),
                      ),
                      Expanded(
                        child: ListView.builder(
                          itemCount: filteredAppointments.length,
                          itemBuilder: (context, index) {
                            return AppointmentCard(
                                appointment: filteredAppointments[index]);
                          },
                        ),
                      ),
                    ],
                  );
                } else {
                  return Center(child: Text('لا توجد مواعيد متاحة.'));
                }
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.blue[700],
        onPressed: () {
          Navigator.push(context,
              MaterialPageRoute(builder: (context) => AddAppointmentScreen()));
        },
        child: Icon(Icons.add),
      ),
    );
  }

  DateTime convertTo24HourFormat(String time) {
    final format = DateFormat("hh:mm a");
    final dateTime = format.parse(time);
    return dateTime;
  }
}
